openapi: 3.0.1
info:
  title: OpenAPI SpringBootSecurity
  version: v1
servers:
  - url: http://localhost:8080
paths:
  /v1/api/tag:
    get:
      tags:
        - tag-controller
      operationId: getAllTags
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModelTag'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    post:
      tags:
        - tag-controller
      security:
        - BearerAuth: [ ]
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/order:
    get:
      tags:
        - order-controller
      operationId: getAllOrder
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModelOrder'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    post:
      tags:
        - order-controller
      security:
        - BearerAuthUser: [ ]
      operationId: createNewOrder
      requestBody:
        content:
          application/json:
            schema:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/Certificate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/certificate:
    get:
      tags:
        - certificate-controller
      operationId: getAllGiftCertificates
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModelCertificate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    post:
      tags:
        - certificate-controller
      security:
        - BearerAuth: [ ]
      operationId: createCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/auth/token:
    post:
      tags:
        - auth-controller
      operationId: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/auth/register:
    post:
      tags:
        - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUserModel'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/auth/oidc:
    post:
      tags:
        - auth-controller
      operationId: oidc
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenIdConnectionModel'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthUserModel'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/certificate/{id}:
    get:
      tags:
        - certificate-controller
      operationId: getCertificateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    delete:
      tags:
        - certificate-controller
      security:
        - BearerAuth: [ ]
      operationId: deleteCertificateById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    patch:
      tags:
        - certificate-controller
      security:
        - BearerAuth: [ ]
      operationId: patchCertificate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/user:
    get:
      tags:
        - user-controller
      operationId: getAllUser
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModelUser'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/user/{id}:
    get:
      tags:
        - user-controller
      security:
        - BearerAuthUser: [ ]
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/tag/{id}:
    get:
      tags:
        - tag-controller
      operationId: getTagById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
    delete:
      tags:
        - tag-controller
      security:
        - BearerAuth: [ ]
      operationId: deleteTagById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/tag/best:
    get:
      tags:
        - tag-controller
      operationId: getMostWidelyUsedTag
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/order/{id}:
    get:
      tags:
        - order-controller
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
  /v1/api/certificate/search:
    get:
      tags:
        - certificate-controller
      operationId: getCertificateBySeveralTagsName
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: 'Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: tagName
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionModelCertificate'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage400'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage404'
        '500':
          description: INTERNAL SERVER ERROR
components:
  schemas:
    Link:
      type: object
      properties:
        rel:
          type: string
        href:
          type: string
        hreflang:
          type: string
        media:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    Certificate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          minimum: 0
          type: number
        durationOfDays:
          type: string
        createDate:
          type: string
          format: date-time
        lastUpdateDate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalPrice:
          type: number
        purchaseDate:
          type: string
          format: date-time
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        user:
          $ref: '#/components/schemas/User'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
        provider:
          type: string
          enum:
            - GOOGLE
            - BASIC
        enabled:
          type: boolean
        accountNonLocked:
          type: boolean
        admin:
          type: boolean
        googleProvider:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    TokenModel:
      type: object
      properties:
        userId:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string
    AuthUserModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    OpenIdConnectionModel:
      type: object
      properties:
        accessToken:
          type: string
        idToken:
          type: string
    CollectionModelUser:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
    CollectionModelTag:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        content:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    CollectionModelOrder:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        content:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    CollectionModelCertificate:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        content:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
    ErrorMessage400:
      type: object
      properties:
        errorMessage:
          type: string
          example: Bad request
        errorCode:
          type: integer
          example: 400
    ErrorMessage403:
      type: object
      properties:
        errorMessage:
          type: string
          example: Access Denied
        errorCode:
          type: integer
          example: 403
    ErrorMessage404:
      type: object
      properties:
        errorMessage:
          type: string
          example: Not Found
        errorCode:
          type: integer
          example: 404
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: ADMIN only
    BearerAuthUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorized USER or ADMIN
